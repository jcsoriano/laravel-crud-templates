<?php

namespace App\Policies;

{{ NAMESPACES }}

class {{ MODEL }}Policy
{
    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user): Response
    {
        return Response::allow();
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, {{ MODEL }} ${{ MODEL_CAMEL }}): bool|Response
    {
        {{ if scopeUser }}
        return ${{ MODEL_CAMEL }}->user_id == $user->id;
        {{ endif }}
        {{ if scopeTeam }}
        return ${{ MODEL_CAMEL }}->team_id == $user->current_team_id;
        {{ endif }}
        {{ if scopeNone }}
        return Response::allow();
        {{ endif }}
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user): Response
    {
        return Response::allow();
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, {{ MODEL }} ${{ MODEL_CAMEL }}): bool|Response
    {
        {{ if scopeUser }}
        return ${{ MODEL_CAMEL }}->user_id == $user->id;
        {{ endif }}
        {{ if scopeTeam }}
        return ${{ MODEL_CAMEL }}->team_id == $user->current_team_id;
        {{ endif }}
        {{ if scopeNone }}
        return Response::allow();
        {{ endif }}
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, {{ MODEL }} ${{ MODEL_CAMEL }}): bool|Response
    {
        {{ if scopeUser }}
        return ${{ MODEL_CAMEL }}->user_id == $user->id;
        {{ endif }}
        {{ if scopeTeam }}
        return ${{ MODEL_CAMEL }}->team_id == $user->current_team_id;
        {{ endif }}
        {{ if scopeNone }}
        return Response::allow();
        {{ endif }}
    }

    /**
     * Determine whether the user can restore the model.
     */
    public function restore(User $user, {{ MODEL }} ${{ MODEL_CAMEL }}): bool|Response
    {
        {{ if scopeUser }}
        return ${{ MODEL_CAMEL }}->user_id == $user->id;
        {{ endif }}
        {{ if scopeTeam }}
        return ${{ MODEL_CAMEL }}->team_id == $user->current_team_id;
        {{ endif }}
        {{ if scopeNone }}
        return Response::allow();
        {{ endif }}
    }

    /**
     * Determine whether the user can permanently delete the model.
     */
    public function forceDelete(User $user, {{ MODEL }} ${{ MODEL_CAMEL }}): bool|Response
    {
        {{ if scopeUser }}
        return ${{ MODEL_CAMEL }}->user_id == $user->id;
        {{ endif }}
        {{ if scopeTeam }}
        return ${{ MODEL_CAMEL }}->team_id == $user->current_team_id;
        {{ endif }}
        {{ if scopeNone }}
        return Response::allow();
        {{ endif }}
    }
}
