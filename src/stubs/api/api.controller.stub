<?php

namespace App\Http\Controllers\Api{{ NAMESPACE_PATH }};

{{ NAMESPACES }}

class {{ MODEL }}Controller extends Controller
{
    public function index(Request $request)
    {
        Gate::authorize('viewAny', {{ MODEL }}::class);

        $request->validate([
            'page' => 'nullable|integer|min:1',
            'per_page' => 'nullable|integer|min:1',
        ]);

        return {{ MODEL }}Resource::collection(
            {{ if scopeUser }}
            {{ MODEL }}::where('user_id', Auth::id())
                ->paginate($request->integer('per_page')),
            {{ endif }}
            {{ if scopeTeam }}
            {{ MODEL }}::where('team_id', Auth::user()->current_team_id)
                ->paginate($request->integer('per_page')),
            {{ endif }}
            {{ if scopeNone }}
            {{ MODEL }}::paginate(
                $request->integer('per_page'),
            ),
            {{ endif }}
        );
    }

    public function store(Store{{ MODEL }}Request $request)
    {
        Gate::authorize('create', {{ MODEL }}::class);

        return {{ MODEL }}Resource::make(
            {{ if scopeNone }}
            {{ MODEL }}::create(
                $request->validated(),
            ),
            {{ endif }}
            {{ if scopeUser }}
            {{ MODEL }}::create([
                ...$request->validated(),
                'user_id' => Auth::id(),
            ]),
            {{ endif }}
            {{ if scopeTeam }}
            {{ MODEL }}::create([
                ...$request->validated(),
                'team_id' => Auth::user()->current_team_id,
            ]),
            {{ endif }}
        );
    }

    public function show(Request $request, {{ MODEL }} ${{ MODEL_CAMEL }})
    {
        Gate::authorize('view', ${{ MODEL_CAMEL }});

        return {{ MODEL }}Resource::make(${{ MODEL_CAMEL }});
    }

    public function update(Update{{ MODEL }}Request $request, {{ MODEL }} ${{ MODEL_CAMEL }})
    {
        Gate::authorize('update', ${{ MODEL_CAMEL }});

        return {{ MODEL }}Resource::make(
            tap(${{ MODEL_CAMEL }})->update(
                $request->validated(),
            ),
        );
    }

    public function destroy(Request $request, {{ MODEL }} ${{ MODEL_CAMEL }})
    {
        Gate::authorize('delete', ${{ MODEL_CAMEL }});

        return {{ MODEL }}Resource::make(
            tap(${{ MODEL_CAMEL }})->delete(),
        );
    }
}
