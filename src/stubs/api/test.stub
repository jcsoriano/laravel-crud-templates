<?php

namespace Tests\Feature\Api{{ NAMESPACE_PATH }};

{{ NAMESPACES }}

class {{ MODEL }}ControllerTest extends TestCase
{
    use RefreshDatabase;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->actingAs($this->user);
    }

    private function assertJsonStructure(AssertableJson $json, string $path = 'data'): void
    {
        $json->has(
            $path,
            fn (AssertableJson $json) => $json->hasAll([
                {{ TEST_STRUCTURE }}
            ])->etc(),
        )->etc();
    }

    public function test_can_list_{{ MODEL_SNAKE_PLURAL }}(): void
    {
        $this->buildInstance();

        $this->getJson('/api/{{ MODEL_KEBAB_PLURAL }}')
            ->assertOk()
            ->assertJson(
                fn (AssertableJson $json) => $this->assertJsonStructure($json, 'data.0'),
            );
    }

    public function test_can_create_{{ MODEL_SNAKE }}(): void
    {
        $payload = $this->buildPayload();

        $this->postJson('/api/{{ MODEL_KEBAB_PLURAL }}', $payload)
            ->assertCreated()
            ->assertJson(
                fn (AssertableJson $json) => $this->assertJsonStructure($json),
            );

        $this->assertDatabaseHas(
            '{{ MODEL_SNAKE_PLURAL }}',
            $this->prepareForDbAssertion($payload),
        );
    }

    public function test_can_show_{{ MODEL_SNAKE }}(): void
    {
        ${{ MODEL_CAMEL }} = $this->buildInstance();

        $this->getJson("/api/{{ MODEL_KEBAB_PLURAL }}/{${{ MODEL_CAMEL }}->getRouteKey()}")
            ->assertOk()
            ->assertJson(
                fn (AssertableJson $json) => $this->assertJsonStructure($json),
            );
    }

    public function test_can_update_{{ MODEL_SNAKE }}(): void
    {
        ${{ MODEL_CAMEL }} = $this->buildInstance();
        $payload = $this->buildPayload();

        $this->putJson("/api/{{ MODEL_KEBAB_PLURAL }}/{${{ MODEL_CAMEL }}->getRouteKey()}", $payload)
            ->assertOk()
            ->assertJson(
                fn (AssertableJson $json) => $this->assertJsonStructure($json),
            );

        $dbAssertion = $this->prepareForDbAssertion($payload);
        $dbAssertion['id'] = ${{ MODEL_CAMEL }}->id;
        $this->assertDatabaseHas('{{ MODEL_SNAKE_PLURAL }}', $dbAssertion);
    }

    public function test_can_delete_{{ MODEL_SNAKE }}(): void
    {
        ${{ MODEL_CAMEL }} = $this->buildInstance();

        $this->deleteJson("/api/{{ MODEL_KEBAB_PLURAL }}/{${{ MODEL_CAMEL }}->getRouteKey()}")
            ->assertOk()
            ->assertJson(
                fn (AssertableJson $json) => $this->assertJsonStructure($json),
            );

        $this->assertSoftDeleted('{{ MODEL_SNAKE_PLURAL }}', ${{ MODEL_CAMEL }}->only('id'));
    }

    private function buildPayload(): array
    {
        return {{ MODEL }}::factory()->make()->toArray();
    }

    private function buildInstance(): {{ MODEL }}
    {
        {{ if scopeNone }}
        return {{ MODEL }}::factory()->create();
        {{ endif }}
        {{ if scopeUser }}
        return {{ MODEL }}::factory()
            ->for($this->user)
            ->create();
        {{ endif }}
        {{ if scopeTeam }}
        return {{ MODEL }}::factory()->create([
            'team_id' => $this->user->current_team_id,
        ]);
        {{ endif }}
    }

    private function prepareForDbAssertion(array $payload): array
    {
        return [
            {{ DB_ASSERTION_COLUMNS }}
        ];
    }
}
